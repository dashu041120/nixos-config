#!/bin/bash
# encoding: utf8
# NetworkManager rofi/dmenu script for managing network connections
# Supports WiFi, Ethernet, VPN connections and more

# Configuration
ROFI_CONFIG="$HOME/.config/hypr/rofi/networkmenu_config.ini"
MENU_CMD="rofi -dmenu -i -p"
NOTIFY_CMD="notify-send"

# Check if NetworkManager is running
if ! pgrep -x "NetworkManager" > /dev/null; then
    $NOTIFY_CMD -u critical "NetworkManager" "NetworkManager is not running"
    exit 1
fi

# Function to show notifications
notify() {
    local message="$1"
    local urgency="${2:-low}"
    if command -v notify-send >/dev/null 2>&1; then
        $NOTIFY_CMD -u "$urgency" -a "NetworkManager" "$message"
    fi
}

# Function to get wifi status
get_wifi_status() {
    nmcli radio wifi
}

# Function to get networking status  
get_networking_status() {
    nmcli networking
}

# Function to get bluetooth status
get_bluetooth_status() {
    if command -v bluetoothctl >/dev/null 2>&1; then
        if systemctl is-active --quiet bluetooth; then
            bluetoothctl show | grep -q "Powered: yes" && echo "enabled" || echo "disabled"
        else
            echo "disabled"
        fi
    else
        echo "unavailable"
    fi
}

# Function to toggle wifi
toggle_wifi() {
    local action="$1"
    if [[ "$action" == "enable" ]]; then
        nmcli radio wifi on
        notify "WiFi enabled"
    else
        nmcli radio wifi off
        notify "WiFi disabled"
    fi
}

# Function to toggle networking
toggle_networking() {
    local action="$1"
    if [[ "$action" == "enable" ]]; then
        nmcli networking on
        notify "Networking enabled"
    else
        nmcli networking off
        notify "Networking disabled"
    fi
}

# Function to toggle bluetooth
toggle_bluetooth() {
    local action="$1"
    if command -v bluetoothctl >/dev/null 2>&1; then
        if [[ "$action" == "enable" ]]; then
            bluetoothctl power on
            notify "Bluetooth enabled"
        else
            bluetoothctl power off
            notify "Bluetooth disabled"
        fi
    else
        notify "Bluetooth not available" "critical"
    fi
}

# Function to rescan wifi
rescan_wifi() {
    nmcli device wifi rescan
    sleep 2
    notify "WiFi scan complete"
}

# Function to get wifi networks with signal strength
get_wifi_networks() {
    local active_ssid=""
    local active_conn=""
    
    # Get currently connected WiFi
    active_conn=$(nmcli -t -f NAME,TYPE,DEVICE connection show --active | grep "wifi" | head -n1)
    if [[ -n "$active_conn" ]]; then
        active_ssid=$(echo "$active_conn" | cut -d: -f1)
    fi
    
    # Get available WiFi networks
    nmcli -f SSID,SECURITY,SIGNAL,IN-USE device wifi | tail -n +2 | while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" || "$line" =~ ^[[:space:]]*$ ]] && continue
        
        # Parse the line - handle SSIDs with spaces
        local in_use=$(echo "$line" | grep -o '\*[[:space:]]*$' || echo "")
        local line_clean=$(echo "$line" | sed 's/\*[[:space:]]*$//')
        
        # Extract signal (last number before security)
        local signal=$(echo "$line_clean" | grep -o '[0-9]\+[[:space:]]*$' | tr -d ' ')
        local line_no_signal=$(echo "$line_clean" | sed 's/[[:space:]]*[0-9]\+[[:space:]]*$//')
        
        # Extract security (WPA, WEP, etc. or --)
        local security=$(echo "$line_no_signal" | grep -o '[A-Z0-9-]\+[[:space:]]*$' | tr -d ' ')
        if [[ -z "$security" ]]; then
            security="--"
        fi
        local ssid=$(echo "$line_no_signal" | sed "s/[[:space:]]*${security}[[:space:]]*$//")
        
        # Skip hidden networks
        [[ -z "$ssid" || "$ssid" =~ ^[[:space:]]*$ ]] && continue
        
        # Format signal strength as bars
        local bars=""
        if [[ -n "$signal" ]]; then
            local strength=$((signal / 25))
            case $strength in
                0) bars="‚ñÅ   " ;;
                1) bars="‚ñÅ‚ñÇ  " ;;
                2) bars="‚ñÅ‚ñÇ‚ñÉ " ;;
                3) bars="‚ñÅ‚ñÇ‚ñÉ‚ñÑ" ;;
                *) bars="‚ñÅ‚ñÇ‚ñÉ‚ñÑ" ;;
            esac
        else
            bars="    "
        fi
        
        # Format output with consistent spacing
        local prefix=""
        if [[ -n "$in_use" ]]; then
            prefix="‚óè "
        else
            prefix="  "
        fi
        
        printf "%s%-30s %-10s %s\n" "$prefix" "$ssid" "$security" "$bars"
    done
}

# Function to get ethernet connections
get_ethernet_connections() {
    nmcli -t -f NAME,TYPE,DEVICE connection show | grep "ethernet" | while IFS=: read -r name type device; do
        local status=""
        if nmcli -t -f NAME connection show --active | grep -q "^$name$"; then
            status="‚óè "
        else
            status="  "
        fi
        echo "${status}${name}:Ethernet"
    done
}

# Function to get VPN connections
get_vpn_connections() {
    nmcli -t -f NAME,TYPE connection show | grep "vpn" | while IFS=: read -r name type; do
        local status=""
        if nmcli -t -f NAME connection show --active | grep -q "^$name$"; then
            status="‚óè "
        else
            status="  "
        fi
        echo "${status}${name}:VPN"
    done
}

# Function to connect to WiFi network
connect_wifi() {
    local ssid="$1"
    local security="$2"
    
    # Remove leading/trailing whitespace
    ssid=$(echo "$ssid" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    # Check if this network has a saved connection
    local saved_conn=$(nmcli -t -f NAME,TYPE connection show | grep "wifi" | while IFS=: read -r name type; do
        if [[ "$name" == "$ssid" ]]; then
            echo "$name"
            break
        fi
    done)
    
    if [[ -n "$saved_conn" ]]; then
        # Use saved connection
        nmcli connection up "$saved_conn"
        if [[ $? -eq 0 ]]; then
            notify "Connected to $ssid"
        else
            notify "Failed to connect to $ssid" "critical"
        fi
    else
        # New connection - ask for password if needed
        if [[ "$security" != "--" ]]; then
            local password
            password=$(echo "" | $MENU_CMD "Password for $ssid:" -password)
            if [[ -n "$password" ]]; then
                nmcli device wifi connect "$ssid" password "$password"
                if [[ $? -eq 0 ]]; then
                    notify "Connected to $ssid"
                else
                    notify "Failed to connect to $ssid" "critical"
                fi
            fi
        else
            # Open network
            nmcli device wifi connect "$ssid"
            if [[ $? -eq 0 ]]; then
                notify "Connected to $ssid"
            else
                notify "Failed to connect to $ssid" "critical"
            fi
        fi
    fi
}

# Function to disconnect from network
disconnect_network() {
    local connection="$1"
    nmcli connection down "$connection"
    if [[ $? -eq 0 ]]; then
        notify "Disconnected from $connection"
    else
        notify "Failed to disconnect from $connection" "critical"
    fi
}

# Function to activate connection
activate_connection() {
    local connection="$1"
    nmcli connection up "$connection"
    if [[ $? -eq 0 ]]; then
        notify "Connected to $connection"
    else
        notify "Failed to connect to $connection" "critical"
    fi
}

# Function to show main menu
show_main_menu() {
    local wifi_status=$(get_wifi_status)
    local net_status=$(get_networking_status)
    local bt_status=$(get_bluetooth_status)
    
    local menu_items=""
    
    # WiFi toggle
    if [[ "$wifi_status" == "enabled" ]]; then
        menu_items+="üî¥ Disable WiFi\n"
    else
        menu_items+="üü¢ Enable WiFi\n"
    fi
    
    # Networking toggle
    if [[ "$net_status" == "enabled" ]]; then
        menu_items+="üî¥ Disable Networking\n"
    else
        menu_items+="üü¢ Enable Networking\n"
    fi
    
    # Bluetooth toggle
    if [[ "$bt_status" == "enabled" ]]; then
        menu_items+="üî¥ Disable Bluetooth\n"
    elif [[ "$bt_status" == "disabled" ]]; then
        menu_items+="üü¢ Enable Bluetooth\n"
    fi
    
    # Add separator
    menu_items+="\n"
    
    # WiFi networks (if WiFi is enabled)
    if [[ "$wifi_status" == "enabled" ]]; then
        menu_items+="üì∂ WiFi Networks\n"
        menu_items+="üîÑ Rescan WiFi\n"
    fi
    
    # Ethernet connections
    menu_items+="üîå Ethernet Connections\n"
    
    # VPN connections
    menu_items+="üîí VPN Connections\n"
    
    # Management options
    menu_items+="\n"
    menu_items+="‚öôÔ∏è  Connection Manager\n"
    menu_items+="üóëÔ∏è  Delete Connection\n"
    
    echo -e "$menu_items"
}

# Function to show WiFi networks menu
show_wifi_menu() {
    local networks
    networks=$(get_wifi_networks)
    
    if [[ -z "$networks" ]]; then
        notify "No WiFi networks found" "normal"
        return
    fi
    
    echo "$networks"
}

# Function to show ethernet menu
show_ethernet_menu() {
    local connections
    connections=$(get_ethernet_connections)
    
    if [[ -z "$connections" ]]; then
        echo "  No Ethernet connections configured"
        return
    fi
    
    echo "$connections"
}

# Function to show VPN menu
show_vpn_menu() {
    local connections
    connections=$(get_vpn_connections)
    
    if [[ -z "$connections" ]]; then
        echo "  No VPN connections configured"
        return
    fi
    
    echo "$connections"
}

# Function to delete connection
delete_connection_menu() {
    local connections
    connections=$(nmcli -t -f NAME,TYPE connection show | while IFS=: read -r name type; do
        echo "$name ($type)"
    done)
    
    if [[ -z "$connections" ]]; then
        notify "No connections to delete" "normal"
        return
    fi
    
    local selected
    selected=$(echo "$connections" | $MENU_CMD "Delete connection:")
    
    if [[ -n "$selected" ]]; then
        local conn_name=$(echo "$selected" | sed 's/ (.*)$//')
        local confirm
        confirm=$(echo -e "Yes\nNo" | $MENU_CMD "Delete '$conn_name'?")
        
        if [[ "$confirm" == "Yes" ]]; then
            nmcli connection delete "$conn_name"
            if [[ $? -eq 0 ]]; then
                notify "Deleted connection: $conn_name"
            else
                notify "Failed to delete connection: $conn_name" "critical"
            fi
        fi
    fi
}

# Main script logic
main() {
    case "${1:-}" in
        "wifi")
            show_wifi_menu
            ;;
        "ethernet")
            show_ethernet_menu
            ;;
        "vpn")
            show_vpn_menu
            ;;
        *)
            local selection
            selection=$(show_main_menu | $MENU_CMD "Network Manager:")
            
            case "$selection" in
                "üü¢ Enable WiFi")
                    toggle_wifi "enable"
                    ;;
                "üî¥ Disable WiFi")
                    toggle_wifi "disable"
                    ;;
                "üü¢ Enable Networking")
                    toggle_networking "enable"
                    ;;
                "üî¥ Disable Networking")
                    toggle_networking "disable"
                    ;;
                "üü¢ Enable Bluetooth")
                    toggle_bluetooth "enable"
                    ;;
                "üî¥ Disable Bluetooth")
                    toggle_bluetooth "disable"
                    ;;
                "üì∂ WiFi Networks")
                    local wifi_selection
                    wifi_selection=$(show_wifi_menu | $MENU_CMD "WiFi Networks:")
                    if [[ -n "$wifi_selection" ]]; then
                        # Parse the selection
                        local prefix="${wifi_selection:0:2}"
                        local line="${wifi_selection:2}"
                        local ssid=$(echo "$line" | sed 's/^\s*//' | awk '{print $1}' | sed 's/[[:space:]]*$//')
                        local security=$(echo "$line" | awk '{print $2}')
                        
                        if [[ "$prefix" == "‚óè " ]]; then
                            # Currently connected - offer to disconnect
                            local confirm
                            confirm=$(echo -e "Disconnect\nCancel" | $MENU_CMD "Connected to $ssid:")
                            if [[ "$confirm" == "Disconnect" ]]; then
                                disconnect_network "$ssid"
                            fi
                        else
                            # Not connected - connect
                            connect_wifi "$ssid" "$security"
                        fi
                    fi
                    ;;
                "üîÑ Rescan WiFi")
                    rescan_wifi
                    ;;
                "üîå Ethernet Connections")
                    local eth_selection
                    eth_selection=$(show_ethernet_menu | $MENU_CMD "Ethernet:")
                    if [[ -n "$eth_selection" ]]; then
                        local prefix="${eth_selection:0:2}"
                        local line="${eth_selection:2}"
                        local conn_name=$(echo "$line" | cut -d: -f1)
                        
                        if [[ "$prefix" == "‚óè " ]]; then
                            disconnect_network "$conn_name"
                        else
                            activate_connection "$conn_name"
                        fi
                    fi
                    ;;
                "üîí VPN Connections")
                    local vpn_selection
                    vpn_selection=$(show_vpn_menu | $MENU_CMD "VPN:")
                    if [[ -n "$vpn_selection" ]]; then
                        local prefix="${vpn_selection:0:2}"
                        local line="${vpn_selection:2}"
                        local conn_name=$(echo "$line" | cut -d: -f1)
                        
                        if [[ "$prefix" == "‚óè " ]]; then
                            disconnect_network "$conn_name"
                        else
                            activate_connection "$conn_name"
                        fi
                    fi
                    ;;
                "‚öôÔ∏è  Connection Manager")
                    if command -v nm-connection-editor >/dev/null 2>&1; then
                        nm-connection-editor &
                    elif command -v nmtui >/dev/null 2>&1; then
                        alacritty -e nmtui &
                    else
                        notify "No connection manager found" "critical"
                    fi
                    ;;
                "üóëÔ∏è  Delete Connection")
                    delete_connection_menu
                    ;;
            esac
            ;;
    esac
}

# Run main function
main "$@"
